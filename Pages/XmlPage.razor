@page "/xmldata"
@using System.Xml.Serialization
@using System.Xml.Linq
@using System.Xml
@using System.Text
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>File xml</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">XML ANALYSIS</MudText>
    </MudItem>
    <MudItem Class="mud-theme-primary rounded-lg" xs="12">
        <MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Height="125px" Outlined="true" Class="@DragClass">
            @if (!Clearing)
            {
                <InputFile OnChange="OnInputFileChanged" multiple class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" accept=".xml, .cnf" />
            }
            <MudText Typo="Typo.h6">Drag and drop files here or click MAX 10 FILES</MudText>
            @foreach (var file in loadedFiles)
            {
                <MudChip Color="Color.Dark" Text="@file.Name" />
            }
        </MudPaper>

        <MudProgressLinear hidden="@(!loadedFiles.Any())" Color="Color.Tertiary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
    </MudItem>
    <MudItem Class="mud-theme-primary rounded-l-lg" xs="12" sm="3">
        <MudPaper Class="d-flex align-center mud-width-full py-8" Elevation="10">
            <MudList Clickable="true">
                <MudListSubheader>
                    <MudText Typo="Typo.h5"> MultiBlock</MudText>
                </MudListSubheader>
                @if (ShowGrid)
                {
                    <MudListItem Icon="@Icons.Filled.Dashboard" IconColor="Color.Primary" Text="ErdbVersion" OnClick="@(() => onclick("ErdbVersion", MultiBlock.ErdbVersion))" />
                    <MudListItem Icon="@Icons.Filled.Security" IconColor="Color.Success" Text="@MultiBlock.Block.BlockDef.BlockName" OnClick="@(() => onclick("Block", MultiBlock.Block))" />
                    <MudListItem Icon="@Icons.Filled.AdminPanelSettings" IconColor="Color.Warning" Text="EmbBlock" InitiallyExpanded="true">
                        <NestedList>
                            @foreach (var embBlock in MultiBlock.Block.EmbBlocks.Block)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.Security" IconColor="Color.Info" Text="@embBlock.BlockDef.BlockName" OnClick="@(() => onclick("Block", embBlock))" />
                            }
                        </NestedList>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem Class="mud-theme-primary rounded-r-lg" xs="12" sm="9">

        @switch (@_param)
        {
            case "ErdbVersion":
                <GridComponent T="ErdbVersion" Items="ErdbVersions" Props="ErdbVersionProps" TableName="Erdb Version"></GridComponent>
                break;
            case "Block":
                <GridComponent T="BlockDef" Items="BlockDefs" Props="BlockDefProps" TableName="BlockDef"></GridComponent>
                <GridComponent T="Coord" Items="Coords" Props="CoordProps" TableName="Coord"></GridComponent>
                 @if(Parameters != null)
                {
                     <GridComponent T="Parameter" Items="Parameters.Parameter" Props="ParameterProps" TableName="Parameters"></GridComponent>
                } 
                @if(SymbolAttrs != null)
                {
                    <GridComponent T="SymbolAttr" Items="SymbolAttrs.SymbolAttr" Props="SymbolAttrProps" TableName="SymbolAttrs"></GridComponent>
                }              
                @if(Connections != null)
                {
                    <GridComponent T="Connection" Items="Connections.Connection" Props="ConnectionProps" TableName="Connections"></GridComponent>
                    <GridComponent T="Vertex" Items="VertexList" Props="VertexProps" TableName="Vertex"></GridComponent>
                }
                break;
           @* case "EmbBlock":
                <GridComponent T="BlockDef" Items="BlockDefs" Props="BlockDefProps" TableName="BlockDef"></GridComponent>
                <GridComponent T="Coord" Items="Coords" Props="CoordProps" TableName="Coord"></GridComponent>
                <GridComponent T="Parameter" Items="Parameters.Parameter" Props="ParameterProps" TableName="Parameters"></GridComponent>
                <GridComponent T="SymbolAttr" Items="SymbolAttrs.SymbolAttr" Props="SymbolAttrProps" TableName="SymbolAttrs"></GridComponent>
                @if(Connections != null)
                {
                    <GridComponent T="Connection" Items="Connections.Connection" Props="ConnectionProps" TableName="Connections"></GridComponent>
                    <GridComponent T="Vertex" Items="VertexList" Props="VertexProps" TableName="Vertex"></GridComponent>
                }              
                break;*@
            default:
                // code block
                break;
        }
    </MudItem>
</MudGrid>


@code {

    private bool ShowGrid { get; set; }
    private string _param = string.Empty;

    private bool Clearing = false;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string DragClass = DefaultDragClass;
    private List<IBrowserFile> loadedFiles = new();

    private List<ErdbVersion> ErdbVersions = new();
    private List<BlockDef> BlockDefs = new();
    private List<Coord> Coords = new();
    private List<Vertex> VertexList = new();

    private MultiBlock MultiBlock = new();
    private ErdbVersion ErdbVersion = new();
    private BlockDef BlockDef = new();
    private Coord Coord = new();
    private Parameter Parameter = new();
    private Parameters Parameters = new();
    private SymbolAttr SymbolAttr = new();
    private SymbolAttrs SymbolAttrs = new();
    private Connection Connection = new();
    private Connections Connections = new();
    private Vertex Vertex = new();

    private List<string> ErdbVersionProps = new();
    private List<string> BlockProps = new();
    private List<string> BlockDefProps = new();
    private List<string> CoordProps = new();
    private List<string> ParameterProps = new();
    private List<string> SymbolAttrProps = new();
    private List<string> EmbBlockProps = new();
    private List<string> ConnectionProps = new();
    private List<string> VertexProps = new();


    protected override void OnInitialized()
    {

        foreach (var propertyInfo in typeof(ErdbVersion).GetProperties())
        {
            ErdbVersionProps.Add(propertyInfo.Name);
        }

        foreach (var propertyInfo in typeof(BlockDef).GetProperties())
        {
            BlockDefProps.Add(propertyInfo.Name);
        }

        foreach (var propertyInfo in typeof(Coord).GetProperties())
        {
            CoordProps.Add(propertyInfo.Name);
        }

        foreach (var propertyInfo in typeof(Parameter).GetProperties())
        {
            ParameterProps.Add(propertyInfo.Name);
        }

        foreach (var propertyInfo in typeof(SymbolAttr).GetProperties())
        {
            SymbolAttrProps.Add(propertyInfo.Name);
        }

        foreach (var propertyInfo in typeof(Connection).GetProperties())
        {
            ConnectionProps.Add(propertyInfo.Name);
        }

        foreach (var propertyInfo in typeof(Vertex).GetProperties())
        {
            VertexProps.Add(propertyInfo.Name);
        }
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        foreach (var file in e.GetMultipleFiles())
        {
            loadedFiles.Add(file);
        }

        Upload();
    }

    private async Task Clear()
    {
        Clearing = true;
        loadedFiles.Clear();
        ClearDragClass();
        await Task.Delay(100);
        Clearing = false;
    }

    private async void Upload()
    {
        //Upload the files here
        long MAXALLOWEDSIZE = 250000000;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        foreach (var file in loadedFiles)
        {

            Stream stream = file.OpenReadStream(MAXALLOWEDSIZE);
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            stream.Close();
            var outputFileString = Encoding.Unicode.GetString(ms.ToArray());

            string _byteOrderMarkUtf8 = Encoding.Unicode.GetString(Encoding.Unicode.GetPreamble());
            if (outputFileString.StartsWith(_byteOrderMarkUtf8))
            {
                outputFileString = outputFileString.Remove(0, _byteOrderMarkUtf8.Length);
                outputFileString = Regex.Replace(outputFileString, "xmlns=.*\">", ">", RegexOptions.IgnoreCase);
            }

            try
            {
                XmlSerializer xmlSerializer = new XmlSerializer(typeof(MultiBlock));
                XDocument xDocument = XDocument.Parse(outputFileString);
                //MultiBlock multiBlock = (MultiBlock)xmlSerializer.Deserialize(xDocument.CreateReader());
                MultiBlock = (MultiBlock)xmlSerializer.Deserialize(xDocument.CreateReader());

                ShowGrid = true;

            }
            catch (XmlException e)
            {
                Snackbar.Add(e.Message, Severity.Error);
            }

        }

        await Clear();

        this.StateHasChanged();
    }

    private void ClearList()
    {
        ErdbVersions.Clear();
        BlockDefs.Clear();
        Coords.Clear();
        VertexList.Clear();
    }

    private void onclick(string param, dynamic blockObj)
    {
        ClearList();
        _param = param;

        switch (param)
        {
            case "ErdbVersion":
                ErdbVersions.Add(blockObj);
                break;
            //case "Block":
            //    BlockDefs.Add(blockObj.BlockDef);
            //    Coords.Add(blockObj.BlockDef.Coord);
            //    Parameters = blockObj.Parameters;
            //    SymbolAttrs = blockObj.SymbolAttrs;
            //    break;
            case "Block":
                BlockDefs.Add(blockObj.BlockDef);
                Coords.Add(blockObj.BlockDef.Coord);
                Parameters = blockObj.Parameters;
                SymbolAttrs = blockObj.SymbolAttrs;
                Connections = blockObj.Connections;
                if (Connections != null)
                {
                    foreach (var connection in blockObj.Connections.Connection)
                    {
                        foreach (var vertex in connection.Vertex)
                        {
                            VertexList.Add(vertex);
                        }
                    }
                }
                break;
            default:
                // code block
                break;
        }

        this.StateHasChanged();
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}


